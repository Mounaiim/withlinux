 using linux for this project. 
 cat ~/.ssh/id_rsa.pub #to generate a ssh key. 
git checkout -b pages_and_layout was to switch to another branch / Switched to a new branch 'pages_and_layout'
use npm # add c9 command to linux npm install -g c9
# use google fonts for the homepage vid 66
#in routes.rb: we will create a route for the home page. Then for the about page that will be /about to get there...
#bbotstrap library front front end. 
#rename your application.css extention to .css.scss 
#got the nav bar from getbootstrap.com
Steps to add a page: 
    1/add an html page at pages
    2/add to the class at pages_controller.rb
    3/add a route in routes.rb
    4/then add access boutton through the navbar in application.html.erb
then will use UIgradients.com for the color and then add it to your css 
container-fluid get rid of the margin right and left 
then you can use inspect for live changes
also padding vs marging, margin is for the the whole section, padding is withing the section. 
change the text color of text in the home-callout css. defualt isblack but in css change with color: #404040
use inspect as much as you can, it shows different feature i.e it will show you specifity of css which class falls under which etc 


use padding on the home page if you want to increase or reduce the blue space. 

We install font awesome using gem 

  <!--<li><a href="/about">About</a></li> <!--html way-->-->
  <!--li><a href="/products">Products</a></li> <-------------------------------------- add to your navbar here-->    


route fixes#86 lesson: make pages transition dynamic instead of hardcoded (update to use prefixes:
use rails routes to check the routes you curently have
..... "/" to route_path
 .... "/about" to about_path or about_url to inject the entire domaine name 
 
 Lorem+tab will generate a large text. 
 
remember to add js for navbar to work 

asset pipline for faster website, (moretrip from the browserto our website increases the cost and slow the website for the customers, bad circumstances occur)



11/29/2020
merge branches together to get the master branch up to date. 
use: git branch //list of branches you have
git status 
git checkout master //to swithcback to master branch
then git merge pages_and_layout // this will dump everything from pages_and_layout to master 
then will create a branch to treat the contact forms 
git checkout -b contact_form

then we create contoller file contacts_controller.rb  then a folder and file in views then route so the customer can access that page 
in the contacts_controller.rb file you gonna have to create a function or a method with same name as your html file then in the route file you write the magic line so customes get to that page and widthdraw all the html in there :D 
Gooboy.

11-30-2020
forms are everywhere, lets learn it: 
https://guides.rubyonrails.org/v5.2/form_helpers.html

now we going to improve forms using bootstrap 

12/23/2020
Database table
create migration file: bundle exec rails generate migration CreateContacts 
then use rails db:migrate to create the table

mvc framework


105: 
connect form in contact page to the database and flash a message. 
used rails console then Concat.all(it is case sensitive) to verify the saved info in th db. 

108: 
some command we could use to process database manually: rails console --sandbox
> Contact.new
> @contact = Contact.new
> @contact.name = "John Doe"
> @contact.email = "john@example.com"
> @contact
> @contact.name
> @contact.save
> Contact.first
> Contact.all
> exit

remember the console is case sensitive

109 form validation, 

Check and put constraint on what we wanna see on our db at the end hence what customers enters in the form 

Now we have the form validation set up, can always use rails c then Hirb.enable then Contact.all to see what is save from the contact page on the db

112
flash has on google and find documentation for the guides

113
search bootstap alert. for the error, success alerts etc! getbootstrap.com/components/#new to get multiple types of flash alerts.
learn "each loop" that we used to flash the error/success message 


116 very throw explanation of the url, get request in the world of web development etc. 
117: HTTP REST(Representational state transfer) and RAILS. 
>rails routes


119
contact mailer file
so when someone send file the form we should be able to get that info somewhere: our email:D

122 
most of email are written with html 
look up string interpretation that allows us to grasp a varible in between a paragraph using curly braces and the @ sign and the pund sign :D not in this order :D 


gotta love using Contact.find(12) to display a single row of your record table. you can always add .delete to destray a targeted row. 

124 review again to understand the hash

control service from cli of ide we are using/how cool is that. 

125 
we used heroku login -i instead of heroku login
then heroku create --stack heroku-16 instead of heroku create which specifies exactly which type of server is compatible with our version of Ruby

we have postgres as database for heroku 

126

we send master branch to production server in our case heroku

git branch to visualize all the branches available

or git branch xxx to create a new branch 

git help tutorial to enter tutorial mode. there you find git log to get all the commited -m " " messages you logged in before

git push origin master 
then git push heroku master



126 
use heroku domain
heroku run rails db:migrate to have your contact form working. (you would havenever fixed this one by yourself :D)

127 
sending email with add on third party "mailgun" the free tier allows us to send 400 mail a day
https://elements.heroku.com/addons/mailgun



























WHen stuck, pay a visit to:
https://upskillcourses.com/courses/essential-web-developer-course/git-workflow-tips



css efficient code: nested code/ read documentation sass-long
========================================================

.navbar-default .navbar-brand,
.navbar-default .navbar-nav > li > a {
  color: white;
  &:hover {
    color: white;
    opacity: 0.75;
  }
}
// Home Page Styles
.home-callout {
  color: white;
  margin-top: -20px;
  padding-top: 50px;
  padding-bottom: 100px;
}












#list of website I am using 
https://github.com/
https://getbootstrap.com/docs/4.5/examples/
https://www.bootstrapcdn.com/
https://getbootstrap.com/docs/4.5/components/navbar/ for the nav bar
api.rubyonrails.org to improve how you write links 
https://github.com/twbs/bootstrap-sass
https://developers.google.com/speed/pagespeed/insights/
https://guides.rubyonrails.org/v5.2/form_helpers.html